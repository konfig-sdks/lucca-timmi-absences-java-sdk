/*
 * Timmi Absences API
 * Welcome on the documentation for Timmi Absences API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CancellationRequest;
import com.konfigthis.client.model.LeavePeriod;
import com.konfigthis.client.model.LeaveRequestApproval;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Absences from work, wether they are planned or not, are described in Lucca using three concepts : **LeaveRequests**, **LeavePeriods** and **Leaves**.  A **LeaveRequest** represent the request made by employees when planning time off. This resource is used for workflow purposes.  A **LeavePeriod** is the continuous period of absence requested by the employee or entered by HR. It is linked to a **LeaveRequest** if workflow applies.  A **Leave** is the subdivision of a **LeavePeriod**. There is one **Leave** per half-day of the **LeavePeriod**. Each **Leave** is linked to a **LeaveAccount**, which represent the type of leave (PTO, Sick Leave, Congés payés, RTT, etc).  ![Timmi Absences - UML](../assets/images/ROunRiCm34LtdeB8M206UeCucG9qABfq9aIs5Y9BBKNPGv6xrrOSH4CcKG-F_F-GZTJA621VVFmXfH5Te9pn3n2Fv2xVcahaKmf9yNFm9YjFog8tTWoBjB1UDSqjkZOd1ueygpUJYAP5OF0iwBow80XmItmJckH3VejaWpK-hE1Tr2S-y_BFHbRoCdHT1zTsRRFgLfgZQFLzFgNuvNKKVhfKTIQJwlRZFR9tBfLePtxIOQ9G.png)  **LeaveRequests** status are by default in the &#x60;pending_approval&#x60; state. **LeaveRequests** status can be &#x60;approved&#x60;, &#x60;denied&#x60;, &#x60;cancelled&#x60; or in the &#x60;cancellation_pending&#x60; state.  ## Fields
 */
@ApiModel(description = "Absences from work, wether they are planned or not, are described in Lucca using three concepts : **LeaveRequests**, **LeavePeriods** and **Leaves**.  A **LeaveRequest** represent the request made by employees when planning time off. This resource is used for workflow purposes.  A **LeavePeriod** is the continuous period of absence requested by the employee or entered by HR. It is linked to a **LeaveRequest** if workflow applies.  A **Leave** is the subdivision of a **LeavePeriod**. There is one **Leave** per half-day of the **LeavePeriod**. Each **Leave** is linked to a **LeaveAccount**, which represent the type of leave (PTO, Sick Leave, Congés payés, RTT, etc).  ![Timmi Absences - UML](../assets/images/ROunRiCm34LtdeB8M206UeCucG9qABfq9aIs5Y9BBKNPGv6xrrOSH4CcKG-F_F-GZTJA621VVFmXfH5Te9pn3n2Fv2xVcahaKmf9yNFm9YjFog8tTWoBjB1UDSqjkZOd1ueygpUJYAP5OF0iwBow80XmItmJckH3VejaWpK-hE1Tr2S-y_BFHbRoCdHT1zTsRRFgLfgZQFLzFgNuvNKKVhfKTIQJwlRZFR9tBfLePtxIOQ9G.png)  **LeaveRequests** status are by default in the `pending_approval` state. **LeaveRequests** status can be `approved`, `denied`, `cancelled` or in the `cancellation_pending` state.  ## Fields")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LeaveRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LEAVE_PERIOD_ID = "leavePeriodId";
  @SerializedName(SERIALIZED_NAME_LEAVE_PERIOD_ID)
  private Integer leavePeriodId;

  public static final String SERIALIZED_NAME_LEAVE_PERIOD = "leavePeriod";
  @SerializedName(SERIALIZED_NAME_LEAVE_PERIOD)
  private LeavePeriod leavePeriod;

  /**
   * Status of the Leave request. Can be :   0 &#x3D; PENDING_APPROVAL  2 &#x3D; APPROVED  3 &#x3D; DENIED  4 &#x3D; CANCELLED  5 &#x3D; CANCELLATION_PENDING 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    NUMBER_0(0),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5);

    private Double value;

    StatusEnum(Double value) {
      this.value = value;
    }

    public Double getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(Double value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(new BigDecimal(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_NEXT_APPROVER_ID = "nextApproverId";
  @SerializedName(SERIALIZED_NAME_NEXT_APPROVER_ID)
  private Object nextApproverId = null;

  public static final String SERIALIZED_NAME_CANCELLATION_USER_ID = "cancellationUserId";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_USER_ID)
  private Object cancellationUserId = null;

  public static final String SERIALIZED_NAME_CANCELLATION_DATE = "cancellationDate";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_DATE)
  private Object cancellationDate = null;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_APPROVALS = "approvals";
  @SerializedName(SERIALIZED_NAME_APPROVALS)
  private List<LeaveRequestApproval> approvals = null;

  public static final String SERIALIZED_NAME_CANCELLATION_REQUESTS = "cancellationRequests";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_REQUESTS)
  private List<CancellationRequest> cancellationRequests = null;

  public LeaveRequest() {
  }

  public LeaveRequest id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier for the LeaveRequest
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the LeaveRequest")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public LeaveRequest leavePeriodId(Integer leavePeriodId) {
    
    
    
    
    this.leavePeriodId = leavePeriodId;
    return this;
  }

   /**
   * Unique identifier for the attached LeavePeriod
   * @return leavePeriodId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the attached LeavePeriod")

  public Integer getLeavePeriodId() {
    return leavePeriodId;
  }


  public void setLeavePeriodId(Integer leavePeriodId) {
    
    
    
    this.leavePeriodId = leavePeriodId;
  }


  public LeaveRequest leavePeriod(LeavePeriod leavePeriod) {
    
    
    
    
    this.leavePeriod = leavePeriod;
    return this;
  }

   /**
   * Get leavePeriod
   * @return leavePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LeavePeriod getLeavePeriod() {
    return leavePeriod;
  }


  public void setLeavePeriod(LeavePeriod leavePeriod) {
    
    
    
    this.leavePeriod = leavePeriod;
  }


  public LeaveRequest status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

  public LeaveRequest status(Integer status) {
    
    
    
    
    this.status = status.doubleValue();
    return this;
  }

   /**
   * Status of the Leave request. Can be :   0 &#x3D; PENDING_APPROVAL  2 &#x3D; APPROVED  3 &#x3D; DENIED  4 &#x3D; CANCELLED  5 &#x3D; CANCELLATION_PENDING 
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of the Leave request. Can be :   0 = PENDING_APPROVAL  2 = APPROVED  3 = DENIED  4 = CANCELLED  5 = CANCELLATION_PENDING ")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public LeaveRequest creationDate(OffsetDateTime creationDate) {
    
    
    
    
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Time at which the object was created
   * @return creationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Time at which the object was created")

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  public void setCreationDate(OffsetDateTime creationDate) {
    
    
    
    this.creationDate = creationDate;
  }


  public LeaveRequest nextApproverId(Object nextApproverId) {
    
    
    
    
    this.nextApproverId = nextApproverId;
    return this;
  }

   /**
   * Unique identifier for the next approver
   * @return nextApproverId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the next approver")

  public Object getNextApproverId() {
    return nextApproverId;
  }


  public void setNextApproverId(Object nextApproverId) {
    
    
    
    this.nextApproverId = nextApproverId;
  }


  public LeaveRequest cancellationUserId(Object cancellationUserId) {
    
    
    
    
    this.cancellationUserId = cancellationUserId;
    return this;
  }

   /**
   * Unique identifier for the user that cancelled the Leave Request
   * @return cancellationUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the user that cancelled the Leave Request")

  public Object getCancellationUserId() {
    return cancellationUserId;
  }


  public void setCancellationUserId(Object cancellationUserId) {
    
    
    
    this.cancellationUserId = cancellationUserId;
  }


  public LeaveRequest cancellationDate(Object cancellationDate) {
    
    
    
    
    this.cancellationDate = cancellationDate;
    return this;
  }

   /**
   * Time at which the object was cancelled
   * @return cancellationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Time at which the object was cancelled")

  public Object getCancellationDate() {
    return cancellationDate;
  }


  public void setCancellationDate(Object cancellationDate) {
    
    
    
    this.cancellationDate = cancellationDate;
  }


  public LeaveRequest isActive(Boolean isActive) {
    
    
    
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Has the value &#x60;true&#x60; for acitve Leave Request or the value &#x60;false&#x60; for cancelled Leave Request
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Has the value `true` for acitve Leave Request or the value `false` for cancelled Leave Request")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    
    
    
    this.isActive = isActive;
  }


  public LeaveRequest approvals(List<LeaveRequestApproval> approvals) {
    
    
    
    
    this.approvals = approvals;
    return this;
  }

  public LeaveRequest addApprovalsItem(LeaveRequestApproval approvalsItem) {
    if (this.approvals == null) {
      this.approvals = new ArrayList<>();
    }
    this.approvals.add(approvalsItem);
    return this;
  }

   /**
   * Get approvals
   * @return approvals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<LeaveRequestApproval> getApprovals() {
    return approvals;
  }


  public void setApprovals(List<LeaveRequestApproval> approvals) {
    
    
    
    this.approvals = approvals;
  }


  public LeaveRequest cancellationRequests(List<CancellationRequest> cancellationRequests) {
    
    
    
    
    this.cancellationRequests = cancellationRequests;
    return this;
  }

  public LeaveRequest addCancellationRequestsItem(CancellationRequest cancellationRequestsItem) {
    if (this.cancellationRequests == null) {
      this.cancellationRequests = new ArrayList<>();
    }
    this.cancellationRequests.add(cancellationRequestsItem);
    return this;
  }

   /**
   * Get cancellationRequests
   * @return cancellationRequests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CancellationRequest> getCancellationRequests() {
    return cancellationRequests;
  }


  public void setCancellationRequests(List<CancellationRequest> cancellationRequests) {
    
    
    
    this.cancellationRequests = cancellationRequests;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LeaveRequest instance itself
   */
  public LeaveRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaveRequest leaveRequest = (LeaveRequest) o;
    return Objects.equals(this.id, leaveRequest.id) &&
        Objects.equals(this.leavePeriodId, leaveRequest.leavePeriodId) &&
        Objects.equals(this.leavePeriod, leaveRequest.leavePeriod) &&
        Objects.equals(this.status, leaveRequest.status) &&
        Objects.equals(this.creationDate, leaveRequest.creationDate) &&
        Objects.equals(this.nextApproverId, leaveRequest.nextApproverId) &&
        Objects.equals(this.cancellationUserId, leaveRequest.cancellationUserId) &&
        Objects.equals(this.cancellationDate, leaveRequest.cancellationDate) &&
        Objects.equals(this.isActive, leaveRequest.isActive) &&
        Objects.equals(this.approvals, leaveRequest.approvals) &&
        Objects.equals(this.cancellationRequests, leaveRequest.cancellationRequests)&&
        Objects.equals(this.additionalProperties, leaveRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, leavePeriodId, leavePeriod, status, creationDate, nextApproverId, cancellationUserId, cancellationDate, isActive, approvals, cancellationRequests, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaveRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    leavePeriodId: ").append(toIndentedString(leavePeriodId)).append("\n");
    sb.append("    leavePeriod: ").append(toIndentedString(leavePeriod)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    nextApproverId: ").append(toIndentedString(nextApproverId)).append("\n");
    sb.append("    cancellationUserId: ").append(toIndentedString(cancellationUserId)).append("\n");
    sb.append("    cancellationDate: ").append(toIndentedString(cancellationDate)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    approvals: ").append(toIndentedString(approvals)).append("\n");
    sb.append("    cancellationRequests: ").append(toIndentedString(cancellationRequests)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("leavePeriodId");
    openapiFields.add("leavePeriod");
    openapiFields.add("status");
    openapiFields.add("creationDate");
    openapiFields.add("nextApproverId");
    openapiFields.add("cancellationUserId");
    openapiFields.add("cancellationDate");
    openapiFields.add("isActive");
    openapiFields.add("approvals");
    openapiFields.add("cancellationRequests");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LeaveRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LeaveRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeaveRequest is not found in the empty JSON string", LeaveRequest.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `leavePeriod`
      if (jsonObj.get("leavePeriod") != null && !jsonObj.get("leavePeriod").isJsonNull()) {
        LeavePeriod.validateJsonObject(jsonObj.getAsJsonObject("leavePeriod"));
      }
      if (jsonObj.get("approvals") != null && !jsonObj.get("approvals").isJsonNull()) {
        JsonArray jsonArrayapprovals = jsonObj.getAsJsonArray("approvals");
        if (jsonArrayapprovals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("approvals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `approvals` to be an array in the JSON string but got `%s`", jsonObj.get("approvals").toString()));
          }

          // validate the optional field `approvals` (array)
          for (int i = 0; i < jsonArrayapprovals.size(); i++) {
            LeaveRequestApproval.validateJsonObject(jsonArrayapprovals.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("cancellationRequests") != null && !jsonObj.get("cancellationRequests").isJsonNull()) {
        JsonArray jsonArraycancellationRequests = jsonObj.getAsJsonArray("cancellationRequests");
        if (jsonArraycancellationRequests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cancellationRequests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cancellationRequests` to be an array in the JSON string but got `%s`", jsonObj.get("cancellationRequests").toString()));
          }

          // validate the optional field `cancellationRequests` (array)
          for (int i = 0; i < jsonArraycancellationRequests.size(); i++) {
            CancellationRequest.validateJsonObject(jsonArraycancellationRequests.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeaveRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeaveRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeaveRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeaveRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LeaveRequest>() {
           @Override
           public void write(JsonWriter out, LeaveRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LeaveRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LeaveRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LeaveRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LeaveRequest
  * @throws IOException if the JSON string is invalid with respect to LeaveRequest
  */
  public static LeaveRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeaveRequest.class);
  }

 /**
  * Convert an instance of LeaveRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

