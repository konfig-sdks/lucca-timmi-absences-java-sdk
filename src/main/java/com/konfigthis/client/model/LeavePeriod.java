/*
 * Timmi Absences API
 * Welcome on the documentation for Timmi Absences API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Leave;
import com.konfigthis.client.model.LeavePeriodLog;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Absences from work, wether they are planned or not, are described in Lucca using three concepts : **LeaveRequests**, **LeavePeriods** and **Leaves**.  A **LeaveRequest** represent the request made by employees when planning time off. This resource is used for workflow purposes.  A **LeavePeriod** is the continuous period of absence requested by the employee or entered by HR. It is linked to a **LeaveRequest** if workflow applies.  A **Leave** is the subdivision of a **LeavePeriod**. There is one **Leave** per half-day of the **LeavePeriod**. Each **Leave** is linked to a **LeaveAccount**, which represent the type of leave (PTO, Sick Leave, Congés payés, RTT, etc).   ![Timmi Absences - UML](../assets/images/ROunRiCm34LtdeB8M206UeCucG9qABfq9aIs5Y9BBKNPGv6xrrOSH4CcKG-F_F-GZTJA621VVFmXfH5Te9pn3n2Fv2xVcahaKmf9yNFm9YjFog8tTWoBjB1UDSqjkZOd1ueygpUJYAP5OF0iwBow80XmItmJckH3VejaWpK-hE1Tr2S-y_BFHbRoCdHT1zTsRRFgLfgZQFLzFgNuvNKKVhfKTIQJwlRZFR9tBfLePtxIOQ9G.png)  ## Fields
 */
@ApiModel(description = "Absences from work, wether they are planned or not, are described in Lucca using three concepts : **LeaveRequests**, **LeavePeriods** and **Leaves**.  A **LeaveRequest** represent the request made by employees when planning time off. This resource is used for workflow purposes.  A **LeavePeriod** is the continuous period of absence requested by the employee or entered by HR. It is linked to a **LeaveRequest** if workflow applies.  A **Leave** is the subdivision of a **LeavePeriod**. There is one **Leave** per half-day of the **LeavePeriod**. Each **Leave** is linked to a **LeaveAccount**, which represent the type of leave (PTO, Sick Leave, Congés payés, RTT, etc).   ![Timmi Absences - UML](../assets/images/ROunRiCm34LtdeB8M206UeCucG9qABfq9aIs5Y9BBKNPGv6xrrOSH4CcKG-F_F-GZTJA621VVFmXfH5Te9pn3n2Fv2xVcahaKmf9yNFm9YjFog8tTWoBjB1UDSqjkZOd1ueygpUJYAP5OF0iwBow80XmItmJckH3VejaWpK-hE1Tr2S-y_BFHbRoCdHT1zTsRRFgLfgZQFLzFgNuvNKKVhfKTIQJwlRZFR9tBfLePtxIOQ9G.png)  ## Fields")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LeavePeriod {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Double id;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private Double ownerId;

  public static final String SERIALIZED_NAME_IS_CONFIRMED = "isConfirmed";
  @SerializedName(SERIALIZED_NAME_IS_CONFIRMED)
  private Boolean isConfirmed;

  public static final String SERIALIZED_NAME_CONFIRMATION_DATE = "confirmationDate";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_DATE)
  private Object confirmationDate = null;

  public static final String SERIALIZED_NAME_ATTACHMENT_ID = "attachmentId";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_ID)
  private Object attachmentId = null;

  public static final String SERIALIZED_NAME_LEAVES = "leaves";
  @SerializedName(SERIALIZED_NAME_LEAVES)
  private List<Leave> leaves = null;

  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private List<LeavePeriodLog> logs = null;

  public LeavePeriod() {
  }

  public LeavePeriod id(Double id) {
    
    
    
    
    this.id = id;
    return this;
  }

  public LeavePeriod id(Integer id) {
    
    
    
    
    this.id = id.doubleValue();
    return this;
  }

   /**
   * Unique identifier for the LeavePeriod
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the LeavePeriod")

  public Double getId() {
    return id;
  }


  public void setId(Double id) {
    
    
    
    this.id = id;
  }


  public LeavePeriod ownerId(Double ownerId) {
    
    
    
    
    this.ownerId = ownerId;
    return this;
  }

  public LeavePeriod ownerId(Integer ownerId) {
    
    
    
    
    this.ownerId = ownerId.doubleValue();
    return this;
  }

   /**
   * Unique identifier for the user 
   * @return ownerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the user ")

  public Double getOwnerId() {
    return ownerId;
  }


  public void setOwnerId(Double ownerId) {
    
    
    
    this.ownerId = ownerId;
  }


  public LeavePeriod isConfirmed(Boolean isConfirmed) {
    
    
    
    
    this.isConfirmed = isConfirmed;
    return this;
  }

   /**
   * Has the value &#x60;true&#x60; for approved LeavePeriod or the value &#x60;false&#x60; for LeavePeriod pending approval
   * @return isConfirmed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Has the value `true` for approved LeavePeriod or the value `false` for LeavePeriod pending approval")

  public Boolean getIsConfirmed() {
    return isConfirmed;
  }


  public void setIsConfirmed(Boolean isConfirmed) {
    
    
    
    this.isConfirmed = isConfirmed;
  }


  public LeavePeriod confirmationDate(Object confirmationDate) {
    
    
    
    
    this.confirmationDate = confirmationDate;
    return this;
  }

   /**
   * Time at which the LeavePeriod was approved
   * @return confirmationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Time at which the LeavePeriod was approved")

  public Object getConfirmationDate() {
    return confirmationDate;
  }


  public void setConfirmationDate(Object confirmationDate) {
    
    
    
    this.confirmationDate = confirmationDate;
  }


  public LeavePeriod attachmentId(Object attachmentId) {
    
    
    
    
    this.attachmentId = attachmentId;
    return this;
  }

   /**
   * Unique identifier for the attached document
   * @return attachmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the attached document")

  public Object getAttachmentId() {
    return attachmentId;
  }


  public void setAttachmentId(Object attachmentId) {
    
    
    
    this.attachmentId = attachmentId;
  }


  public LeavePeriod leaves(List<Leave> leaves) {
    
    
    
    
    this.leaves = leaves;
    return this;
  }

  public LeavePeriod addLeavesItem(Leave leavesItem) {
    if (this.leaves == null) {
      this.leaves = new ArrayList<>();
    }
    this.leaves.add(leavesItem);
    return this;
  }

   /**
   * Get leaves
   * @return leaves
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Leave> getLeaves() {
    return leaves;
  }


  public void setLeaves(List<Leave> leaves) {
    
    
    
    this.leaves = leaves;
  }


  public LeavePeriod logs(List<LeavePeriodLog> logs) {
    
    
    
    
    this.logs = logs;
    return this;
  }

  public LeavePeriod addLogsItem(LeavePeriodLog logsItem) {
    if (this.logs == null) {
      this.logs = new ArrayList<>();
    }
    this.logs.add(logsItem);
    return this;
  }

   /**
   * Get logs
   * @return logs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<LeavePeriodLog> getLogs() {
    return logs;
  }


  public void setLogs(List<LeavePeriodLog> logs) {
    
    
    
    this.logs = logs;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LeavePeriod instance itself
   */
  public LeavePeriod putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeavePeriod leavePeriod = (LeavePeriod) o;
    return Objects.equals(this.id, leavePeriod.id) &&
        Objects.equals(this.ownerId, leavePeriod.ownerId) &&
        Objects.equals(this.isConfirmed, leavePeriod.isConfirmed) &&
        Objects.equals(this.confirmationDate, leavePeriod.confirmationDate) &&
        Objects.equals(this.attachmentId, leavePeriod.attachmentId) &&
        Objects.equals(this.leaves, leavePeriod.leaves) &&
        Objects.equals(this.logs, leavePeriod.logs)&&
        Objects.equals(this.additionalProperties, leavePeriod.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, ownerId, isConfirmed, confirmationDate, attachmentId, leaves, logs, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeavePeriod {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    isConfirmed: ").append(toIndentedString(isConfirmed)).append("\n");
    sb.append("    confirmationDate: ").append(toIndentedString(confirmationDate)).append("\n");
    sb.append("    attachmentId: ").append(toIndentedString(attachmentId)).append("\n");
    sb.append("    leaves: ").append(toIndentedString(leaves)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("ownerId");
    openapiFields.add("isConfirmed");
    openapiFields.add("confirmationDate");
    openapiFields.add("attachmentId");
    openapiFields.add("leaves");
    openapiFields.add("logs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LeavePeriod
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LeavePeriod.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeavePeriod is not found in the empty JSON string", LeavePeriod.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("leaves") != null && !jsonObj.get("leaves").isJsonNull()) {
        JsonArray jsonArrayleaves = jsonObj.getAsJsonArray("leaves");
        if (jsonArrayleaves != null) {
          // ensure the json data is an array
          if (!jsonObj.get("leaves").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `leaves` to be an array in the JSON string but got `%s`", jsonObj.get("leaves").toString()));
          }

          // validate the optional field `leaves` (array)
          for (int i = 0; i < jsonArrayleaves.size(); i++) {
            Leave.validateJsonObject(jsonArrayleaves.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("logs") != null && !jsonObj.get("logs").isJsonNull()) {
        JsonArray jsonArraylogs = jsonObj.getAsJsonArray("logs");
        if (jsonArraylogs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("logs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `logs` to be an array in the JSON string but got `%s`", jsonObj.get("logs").toString()));
          }

          // validate the optional field `logs` (array)
          for (int i = 0; i < jsonArraylogs.size(); i++) {
            LeavePeriodLog.validateJsonObject(jsonArraylogs.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeavePeriod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeavePeriod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeavePeriod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeavePeriod.class));

       return (TypeAdapter<T>) new TypeAdapter<LeavePeriod>() {
           @Override
           public void write(JsonWriter out, LeavePeriod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LeavePeriod read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LeavePeriod instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LeavePeriod given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LeavePeriod
  * @throws IOException if the JSON string is invalid with respect to LeavePeriod
  */
  public static LeavePeriod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeavePeriod.class);
  }

 /**
  * Convert an instance of LeavePeriod to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

