/*
 * Timmi Absences API
 * Welcome on the documentation for Timmi Absences API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ImportsAbsenceBatchCreateResponseDataReport;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ImportsAbsenceBatchCreateResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ImportsAbsenceBatchCreateResponseData {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REPORT = "report";
  @SerializedName(SERIALIZED_NAME_REPORT)
  private ImportsAbsenceBatchCreateResponseDataReport report;

  public static final String SERIALIZED_NAME_GENERATED_AT = "generatedAt";
  @SerializedName(SERIALIZED_NAME_GENERATED_AT)
  private OffsetDateTime generatedAt;

  /**
   * 0 &#x3D; Pending  10 &#x3D; Started  20 &#x3D; Finished  100 &#x3D; Failed 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    NUMBER_0(0),
    
    NUMBER_10(10),
    
    NUMBER_20(20),
    
    NUMBER_100(100);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(Integer value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_LINE_TOTAL = "lineTotal";
  @SerializedName(SERIALIZED_NAME_LINE_TOTAL)
  private Integer lineTotal;

  public static final String SERIALIZED_NAME_TEST_ERROR_TOTAL = "testErrorTotal";
  @SerializedName(SERIALIZED_NAME_TEST_ERROR_TOTAL)
  private Integer testErrorTotal;

  public static final String SERIALIZED_NAME_TOTAL_STEP = "totalStep";
  @SerializedName(SERIALIZED_NAME_TOTAL_STEP)
  private Integer totalStep;

  public static final String SERIALIZED_NAME_EXPECTED_CREATION_TOTAL = "expectedCreationTotal";
  @SerializedName(SERIALIZED_NAME_EXPECTED_CREATION_TOTAL)
  private Integer expectedCreationTotal;

  public static final String SERIALIZED_NAME_EXPECTED_UPDATE_TOTAL = "expectedUpdateTotal";
  @SerializedName(SERIALIZED_NAME_EXPECTED_UPDATE_TOTAL)
  private Integer expectedUpdateTotal;

  public static final String SERIALIZED_NAME_TEST_NON_BLOCKING_ERROR_TOTAL = "testNonBlockingErrorTotal";
  @SerializedName(SERIALIZED_NAME_TEST_NON_BLOCKING_ERROR_TOTAL)
  private Integer testNonBlockingErrorTotal;

  public static final String SERIALIZED_NAME_CURRENT_STEP = "currentStep";
  @SerializedName(SERIALIZED_NAME_CURRENT_STEP)
  private Integer currentStep;

  public static final String SERIALIZED_NAME_CREATION_TOTAL = "creationTotal";
  @SerializedName(SERIALIZED_NAME_CREATION_TOTAL)
  private Integer creationTotal;

  public static final String SERIALIZED_NAME_UPDATE_TOTAL = "updateTotal";
  @SerializedName(SERIALIZED_NAME_UPDATE_TOTAL)
  private Integer updateTotal;

  public static final String SERIALIZED_NAME_IMPORT_ERROR_TOTAL = "importErrorTotal";
  @SerializedName(SERIALIZED_NAME_IMPORT_ERROR_TOTAL)
  private Integer importErrorTotal;

  public ImportsAbsenceBatchCreateResponseData() {
  }

  public ImportsAbsenceBatchCreateResponseData id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ImportsAbsenceBatchCreateResponseData report(ImportsAbsenceBatchCreateResponseDataReport report) {
    
    
    
    
    this.report = report;
    return this;
  }

   /**
   * Get report
   * @return report
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ImportsAbsenceBatchCreateResponseDataReport getReport() {
    return report;
  }


  public void setReport(ImportsAbsenceBatchCreateResponseDataReport report) {
    
    
    
    this.report = report;
  }


  public ImportsAbsenceBatchCreateResponseData generatedAt(OffsetDateTime generatedAt) {
    
    
    
    
    this.generatedAt = generatedAt;
    return this;
  }

   /**
   * Get generatedAt
   * @return generatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getGeneratedAt() {
    return generatedAt;
  }


  public void setGeneratedAt(OffsetDateTime generatedAt) {
    
    
    
    this.generatedAt = generatedAt;
  }


  public ImportsAbsenceBatchCreateResponseData status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * 0 &#x3D; Pending  10 &#x3D; Started  20 &#x3D; Finished  100 &#x3D; Failed 
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "0 = Pending  10 = Started  20 = Finished  100 = Failed ")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public ImportsAbsenceBatchCreateResponseData lineTotal(Integer lineTotal) {
    
    
    
    
    this.lineTotal = lineTotal;
    return this;
  }

   /**
   * Get lineTotal
   * @return lineTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLineTotal() {
    return lineTotal;
  }


  public void setLineTotal(Integer lineTotal) {
    
    
    
    this.lineTotal = lineTotal;
  }


  public ImportsAbsenceBatchCreateResponseData testErrorTotal(Integer testErrorTotal) {
    
    
    
    
    this.testErrorTotal = testErrorTotal;
    return this;
  }

   /**
   * Get testErrorTotal
   * @return testErrorTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTestErrorTotal() {
    return testErrorTotal;
  }


  public void setTestErrorTotal(Integer testErrorTotal) {
    
    
    
    this.testErrorTotal = testErrorTotal;
  }


  public ImportsAbsenceBatchCreateResponseData totalStep(Integer totalStep) {
    
    
    
    
    this.totalStep = totalStep;
    return this;
  }

   /**
   * Get totalStep
   * @return totalStep
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTotalStep() {
    return totalStep;
  }


  public void setTotalStep(Integer totalStep) {
    
    
    
    this.totalStep = totalStep;
  }


  public ImportsAbsenceBatchCreateResponseData expectedCreationTotal(Integer expectedCreationTotal) {
    
    
    
    
    this.expectedCreationTotal = expectedCreationTotal;
    return this;
  }

   /**
   * Get expectedCreationTotal
   * @return expectedCreationTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getExpectedCreationTotal() {
    return expectedCreationTotal;
  }


  public void setExpectedCreationTotal(Integer expectedCreationTotal) {
    
    
    
    this.expectedCreationTotal = expectedCreationTotal;
  }


  public ImportsAbsenceBatchCreateResponseData expectedUpdateTotal(Integer expectedUpdateTotal) {
    
    
    
    
    this.expectedUpdateTotal = expectedUpdateTotal;
    return this;
  }

   /**
   * Get expectedUpdateTotal
   * @return expectedUpdateTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getExpectedUpdateTotal() {
    return expectedUpdateTotal;
  }


  public void setExpectedUpdateTotal(Integer expectedUpdateTotal) {
    
    
    
    this.expectedUpdateTotal = expectedUpdateTotal;
  }


  public ImportsAbsenceBatchCreateResponseData testNonBlockingErrorTotal(Integer testNonBlockingErrorTotal) {
    
    
    
    
    this.testNonBlockingErrorTotal = testNonBlockingErrorTotal;
    return this;
  }

   /**
   * Get testNonBlockingErrorTotal
   * @return testNonBlockingErrorTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTestNonBlockingErrorTotal() {
    return testNonBlockingErrorTotal;
  }


  public void setTestNonBlockingErrorTotal(Integer testNonBlockingErrorTotal) {
    
    
    
    this.testNonBlockingErrorTotal = testNonBlockingErrorTotal;
  }


  public ImportsAbsenceBatchCreateResponseData currentStep(Integer currentStep) {
    
    
    
    
    this.currentStep = currentStep;
    return this;
  }

   /**
   * Get currentStep
   * @return currentStep
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCurrentStep() {
    return currentStep;
  }


  public void setCurrentStep(Integer currentStep) {
    
    
    
    this.currentStep = currentStep;
  }


  public ImportsAbsenceBatchCreateResponseData creationTotal(Integer creationTotal) {
    
    
    
    
    this.creationTotal = creationTotal;
    return this;
  }

   /**
   * Get creationTotal
   * @return creationTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCreationTotal() {
    return creationTotal;
  }


  public void setCreationTotal(Integer creationTotal) {
    
    
    
    this.creationTotal = creationTotal;
  }


  public ImportsAbsenceBatchCreateResponseData updateTotal(Integer updateTotal) {
    
    
    
    
    this.updateTotal = updateTotal;
    return this;
  }

   /**
   * Get updateTotal
   * @return updateTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUpdateTotal() {
    return updateTotal;
  }


  public void setUpdateTotal(Integer updateTotal) {
    
    
    
    this.updateTotal = updateTotal;
  }


  public ImportsAbsenceBatchCreateResponseData importErrorTotal(Integer importErrorTotal) {
    
    
    
    
    this.importErrorTotal = importErrorTotal;
    return this;
  }

   /**
   * Get importErrorTotal
   * @return importErrorTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getImportErrorTotal() {
    return importErrorTotal;
  }


  public void setImportErrorTotal(Integer importErrorTotal) {
    
    
    
    this.importErrorTotal = importErrorTotal;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ImportsAbsenceBatchCreateResponseData instance itself
   */
  public ImportsAbsenceBatchCreateResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportsAbsenceBatchCreateResponseData importsAbsenceBatchCreateResponseData = (ImportsAbsenceBatchCreateResponseData) o;
    return Objects.equals(this.id, importsAbsenceBatchCreateResponseData.id) &&
        Objects.equals(this.report, importsAbsenceBatchCreateResponseData.report) &&
        Objects.equals(this.generatedAt, importsAbsenceBatchCreateResponseData.generatedAt) &&
        Objects.equals(this.status, importsAbsenceBatchCreateResponseData.status) &&
        Objects.equals(this.lineTotal, importsAbsenceBatchCreateResponseData.lineTotal) &&
        Objects.equals(this.testErrorTotal, importsAbsenceBatchCreateResponseData.testErrorTotal) &&
        Objects.equals(this.totalStep, importsAbsenceBatchCreateResponseData.totalStep) &&
        Objects.equals(this.expectedCreationTotal, importsAbsenceBatchCreateResponseData.expectedCreationTotal) &&
        Objects.equals(this.expectedUpdateTotal, importsAbsenceBatchCreateResponseData.expectedUpdateTotal) &&
        Objects.equals(this.testNonBlockingErrorTotal, importsAbsenceBatchCreateResponseData.testNonBlockingErrorTotal) &&
        Objects.equals(this.currentStep, importsAbsenceBatchCreateResponseData.currentStep) &&
        Objects.equals(this.creationTotal, importsAbsenceBatchCreateResponseData.creationTotal) &&
        Objects.equals(this.updateTotal, importsAbsenceBatchCreateResponseData.updateTotal) &&
        Objects.equals(this.importErrorTotal, importsAbsenceBatchCreateResponseData.importErrorTotal)&&
        Objects.equals(this.additionalProperties, importsAbsenceBatchCreateResponseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, report, generatedAt, status, lineTotal, testErrorTotal, totalStep, expectedCreationTotal, expectedUpdateTotal, testNonBlockingErrorTotal, currentStep, creationTotal, updateTotal, importErrorTotal, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportsAbsenceBatchCreateResponseData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    report: ").append(toIndentedString(report)).append("\n");
    sb.append("    generatedAt: ").append(toIndentedString(generatedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    lineTotal: ").append(toIndentedString(lineTotal)).append("\n");
    sb.append("    testErrorTotal: ").append(toIndentedString(testErrorTotal)).append("\n");
    sb.append("    totalStep: ").append(toIndentedString(totalStep)).append("\n");
    sb.append("    expectedCreationTotal: ").append(toIndentedString(expectedCreationTotal)).append("\n");
    sb.append("    expectedUpdateTotal: ").append(toIndentedString(expectedUpdateTotal)).append("\n");
    sb.append("    testNonBlockingErrorTotal: ").append(toIndentedString(testNonBlockingErrorTotal)).append("\n");
    sb.append("    currentStep: ").append(toIndentedString(currentStep)).append("\n");
    sb.append("    creationTotal: ").append(toIndentedString(creationTotal)).append("\n");
    sb.append("    updateTotal: ").append(toIndentedString(updateTotal)).append("\n");
    sb.append("    importErrorTotal: ").append(toIndentedString(importErrorTotal)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("report");
    openapiFields.add("generatedAt");
    openapiFields.add("status");
    openapiFields.add("lineTotal");
    openapiFields.add("testErrorTotal");
    openapiFields.add("totalStep");
    openapiFields.add("expectedCreationTotal");
    openapiFields.add("expectedUpdateTotal");
    openapiFields.add("testNonBlockingErrorTotal");
    openapiFields.add("currentStep");
    openapiFields.add("creationTotal");
    openapiFields.add("updateTotal");
    openapiFields.add("importErrorTotal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ImportsAbsenceBatchCreateResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ImportsAbsenceBatchCreateResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportsAbsenceBatchCreateResponseData is not found in the empty JSON string", ImportsAbsenceBatchCreateResponseData.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `report`
      if (jsonObj.get("report") != null && !jsonObj.get("report").isJsonNull()) {
        ImportsAbsenceBatchCreateResponseDataReport.validateJsonObject(jsonObj.getAsJsonObject("report"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportsAbsenceBatchCreateResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportsAbsenceBatchCreateResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportsAbsenceBatchCreateResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportsAbsenceBatchCreateResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportsAbsenceBatchCreateResponseData>() {
           @Override
           public void write(JsonWriter out, ImportsAbsenceBatchCreateResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportsAbsenceBatchCreateResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ImportsAbsenceBatchCreateResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ImportsAbsenceBatchCreateResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ImportsAbsenceBatchCreateResponseData
  * @throws IOException if the JSON string is invalid with respect to ImportsAbsenceBatchCreateResponseData
  */
  public static ImportsAbsenceBatchCreateResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportsAbsenceBatchCreateResponseData.class);
  }

 /**
  * Convert an instance of ImportsAbsenceBatchCreateResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

