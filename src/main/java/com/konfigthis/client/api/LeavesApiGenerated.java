/*
 * Timmi Absences API
 * Welcome on the documentation for Timmi Absences API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LeavesGetApprovedListResponse;
import com.konfigthis.client.model.LeavesGetByIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LeavesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LeavesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LeavesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelLeaveByIdCall(String leaveId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/leaves/{leaveId}"
            .replace("{" + "leaveId" + "}", localVarApiClient.escapeString(leaveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelLeaveByIdValidateBeforeCall(String leaveId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leaveId' is set
        if (leaveId == null) {
            throw new ApiException("Missing the required parameter 'leaveId' when calling cancelLeaveById(Async)");
        }

        return cancelLeaveByIdCall(leaveId, _callback);

    }


    private ApiResponse<Void> cancelLeaveByIdWithHttpInfo(String leaveId) throws ApiException {
        okhttp3.Call localVarCall = cancelLeaveByIdValidateBeforeCall(leaveId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call cancelLeaveByIdAsync(String leaveId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelLeaveByIdValidateBeforeCall(leaveId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CancelLeaveByIdRequestBuilder {
        private final String leaveId;

        private CancelLeaveByIdRequestBuilder(String leaveId) {
            this.leaveId = leaveId;
        }

        /**
         * Build call for cancelLeaveById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelLeaveByIdCall(leaveId, _callback);
        }


        /**
         * Execute cancelLeaveById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            cancelLeaveByIdWithHttpInfo(leaveId);
        }

        /**
         * Execute cancelLeaveById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return cancelLeaveByIdWithHttpInfo(leaveId);
        }

        /**
         * Execute cancelLeaveById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return cancelLeaveByIdAsync(leaveId, _callback);
        }
    }

    /**
     * Cancellation of a leave
     * Cancel a single Leave by its unique identifier.
     * @param leaveId Identifier of the leave. (required)
     * @return CancelLeaveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CancelLeaveByIdRequestBuilder cancelLeaveById(String leaveId) throws IllegalArgumentException {
        if (leaveId == null) throw new IllegalArgumentException("\"leaveId\" is required but got null");
            

        return new CancelLeaveByIdRequestBuilder(leaveId);
    }
    private okhttp3.Call getApprovedListCall(String paging, List<Object> leavePeriodOwnerId, String date, String leaveAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/leaves";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paging != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paging", paging));
        }

        if (leaveAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("leaveAccountId", leaveAccountId));
        }

        if (leavePeriodOwnerId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "leavePeriod.ownerId", leavePeriodOwnerId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApprovedListValidateBeforeCall(String paging, List<Object> leavePeriodOwnerId, String date, String leaveAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paging' is set
        if (paging == null) {
            throw new ApiException("Missing the required parameter 'paging' when calling getApprovedList(Async)");
        }

        // verify the required parameter 'leavePeriodOwnerId' is set
        if (leavePeriodOwnerId == null) {
            throw new ApiException("Missing the required parameter 'leavePeriodOwnerId' when calling getApprovedList(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getApprovedList(Async)");
        }

        return getApprovedListCall(paging, leavePeriodOwnerId, date, leaveAccountId, _callback);

    }


    private ApiResponse<LeavesGetApprovedListResponse> getApprovedListWithHttpInfo(String paging, List<Object> leavePeriodOwnerId, String date, String leaveAccountId) throws ApiException {
        okhttp3.Call localVarCall = getApprovedListValidateBeforeCall(paging, leavePeriodOwnerId, date, leaveAccountId, null);
        Type localVarReturnType = new TypeToken<LeavesGetApprovedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApprovedListAsync(String paging, List<Object> leavePeriodOwnerId, String date, String leaveAccountId, final ApiCallback<LeavesGetApprovedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApprovedListValidateBeforeCall(paging, leavePeriodOwnerId, date, leaveAccountId, _callback);
        Type localVarReturnType = new TypeToken<LeavesGetApprovedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApprovedListRequestBuilder {
        private final String paging;
        private final List<Object> leavePeriodOwnerId;
        private final String date;
        private String leaveAccountId;

        private GetApprovedListRequestBuilder(String paging, List<Object> leavePeriodOwnerId, String date) {
            this.paging = paging;
            this.leavePeriodOwnerId = leavePeriodOwnerId;
            this.date = date;
        }

        /**
         * Set leaveAccountId
         * @param leaveAccountId  (optional)
         * @return GetApprovedListRequestBuilder
         */
        public GetApprovedListRequestBuilder leaveAccountId(String leaveAccountId) {
            this.leaveAccountId = leaveAccountId;
            return this;
        }
        
        /**
         * Build call for getApprovedList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApprovedListCall(paging, leavePeriodOwnerId, date, leaveAccountId, _callback);
        }


        /**
         * Execute getApprovedList request
         * @return LeavesGetApprovedListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public LeavesGetApprovedListResponse execute() throws ApiException {
            ApiResponse<LeavesGetApprovedListResponse> localVarResp = getApprovedListWithHttpInfo(paging, leavePeriodOwnerId, date, leaveAccountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApprovedList request with HTTP info returned
         * @return ApiResponse&lt;LeavesGetApprovedListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeavesGetApprovedListResponse> executeWithHttpInfo() throws ApiException {
            return getApprovedListWithHttpInfo(paging, leavePeriodOwnerId, date, leaveAccountId);
        }

        /**
         * Execute getApprovedList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeavesGetApprovedListResponse> _callback) throws ApiException {
            return getApprovedListAsync(paging, leavePeriodOwnerId, date, leaveAccountId, _callback);
        }
    }

    /**
     * List leaves
     * Retrieve a list of approved leaves for one or several users on a given period.  The &#x60;leavePeriod.ownerId&#x60; query parameter is required ans is used to:   - retrieve Leaves of a specific user: &#x60;?leavePeriod.ownerId&#x3D;5&#x60; - retrieve Leaves of several users: &#x60;?leavePeriod.ownerId&#x3D;5,6&#x60; - retrieve Leaves of a specific group of users: &#x60;?leavePeriod.owner.departmentId&#x3D;3&#x60;  The &#x60;date&#x60; query parameter can operate comparisons with a given date-time value:  - &#x60;?date&#x3D;2021-01-01&#x60;: strict equality. - &#x60;?date&#x3D;since,2021-01-01&#x60;: greater than or equal. - &#x60;?date&#x3D;until,2021-01-01&#x60;: lower than or equal. - &#x60;?date&#x3D;between,2021-01-01,2021-01-31&#x60;: comprised between two dates.
     * @param paging {offset},{limit}. Defaults to 0,1000. (required)
     * @param leavePeriodOwnerId Employee&#39;s identifier (required)
     * @param date {comparator},{date-time} (required)
     * @return GetApprovedListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetApprovedListRequestBuilder getApprovedList(String paging, List<Object> leavePeriodOwnerId, String date) throws IllegalArgumentException {
        if (paging == null) throw new IllegalArgumentException("\"paging\" is required but got null");
            

        if (leavePeriodOwnerId == null) throw new IllegalArgumentException("\"leavePeriodOwnerId\" is required but got null");
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
            

        return new GetApprovedListRequestBuilder(paging, leavePeriodOwnerId, date);
    }
    private okhttp3.Call getByIdCall(String leaveId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/leaves/{leaveId}"
            .replace("{" + "leaveId" + "}", localVarApiClient.escapeString(leaveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String leaveId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leaveId' is set
        if (leaveId == null) {
            throw new ApiException("Missing the required parameter 'leaveId' when calling getById(Async)");
        }

        return getByIdCall(leaveId, _callback);

    }


    private ApiResponse<LeavesGetByIdResponse> getByIdWithHttpInfo(String leaveId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(leaveId, null);
        Type localVarReturnType = new TypeToken<LeavesGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String leaveId, final ApiCallback<LeavesGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(leaveId, _callback);
        Type localVarReturnType = new TypeToken<LeavesGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String leaveId;

        private GetByIdRequestBuilder(String leaveId) {
            this.leaveId = leaveId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(leaveId, _callback);
        }


        /**
         * Execute getById request
         * @return LeavesGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public LeavesGetByIdResponse execute() throws ApiException {
            ApiResponse<LeavesGetByIdResponse> localVarResp = getByIdWithHttpInfo(leaveId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;LeavesGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeavesGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(leaveId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeavesGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(leaveId, _callback);
        }
    }

    /**
     * Get a leave by id
     * Retrieve a single Leave by its unique identifier.
     * @param leaveId Identifier of the leave. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String leaveId) throws IllegalArgumentException {
        if (leaveId == null) throw new IllegalArgumentException("\"leaveId\" is required but got null");
            

        return new GetByIdRequestBuilder(leaveId);
    }
}
