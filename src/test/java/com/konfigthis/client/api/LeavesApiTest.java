/*
 * Timmi Absences API
 * Welcome on the documentation for Timmi Absences API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.LeavesGetApprovedListResponse;
import com.konfigthis.client.model.LeavesGetByIdResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LeavesApi
 */
@Disabled
public class LeavesApiTest {

    private static LeavesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new LeavesApi(apiClient);
    }

    /**
     * Cancellation of a leave
     *
     * Cancel a single Leave by its unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelLeaveByIdTest() throws ApiException {
        String leaveId = null;
        api.cancelLeaveById(leaveId)
                .execute();
        // TODO: test validations
    }

    /**
     * List leaves
     *
     * Retrieve a list of approved leaves for one or several users on a given period.  The &#x60;leavePeriod.ownerId&#x60; query parameter is required ans is used to:   - retrieve Leaves of a specific user: &#x60;?leavePeriod.ownerId&#x3D;5&#x60; - retrieve Leaves of several users: &#x60;?leavePeriod.ownerId&#x3D;5,6&#x60; - retrieve Leaves of a specific group of users: &#x60;?leavePeriod.owner.departmentId&#x3D;3&#x60;  The &#x60;date&#x60; query parameter can operate comparisons with a given date-time value:  - &#x60;?date&#x3D;2021-01-01&#x60;: strict equality. - &#x60;?date&#x3D;since,2021-01-01&#x60;: greater than or equal. - &#x60;?date&#x3D;until,2021-01-01&#x60;: lower than or equal. - &#x60;?date&#x3D;between,2021-01-01,2021-01-31&#x60;: comprised between two dates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApprovedListTest() throws ApiException {
        String paging = null;
        List<Object> leavePeriodOwnerId = null;
        String date = null;
        String leaveAccountId = null;
        LeavesGetApprovedListResponse response = api.getApprovedList(paging, leavePeriodOwnerId, date)
                .leaveAccountId(leaveAccountId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a leave by id
     *
     * Retrieve a single Leave by its unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String leaveId = null;
        LeavesGetByIdResponse response = api.getById(leaveId)
                .execute();
        // TODO: test validations
    }

}
